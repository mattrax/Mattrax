name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm i

      - name: Typecheck
        run: pnpm typecheck

  migrations:
    name: Migrations
    runs-on: ubuntu-latest
    services:
      postgres:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: mysql
        ports:
          - 3306:3306
    env:
      DATABASE_URL: mysql://root:mysql@localhost:3306/mattrax
      SKIP_ENV_VALIDATION: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          cache: "pnpm"

      - name: Install Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: pnpm i

      - name: Generate migrations
        run: pnpm db:gen

      - name: Detect
        run: |
          if [ $(git status --porcelain | wc -l) -neq "0" ]; then
            echo "  ðŸ”´ Detected missing migrations or invalid `db.rs`. Run `pnpm db:gen` and commit the changes!"
            exit 1
          fi

  format-lint-biome:
    name: Format & Lint (Biome)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm i

      - name: Check formatting
        run: pnpm exec biome ci .

  format-rust:
    name: Format (Cargo)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - name: Check formatting
        run: cargo fmt --check
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - name: Run Clippy
        uses: actions-rs-plus/clippy-check@v2
        with:
          args: --workspace --all-features --locked

  # TODO: Rust tests + Clippy (maybe in separate jobs)
