name: CD
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  CLOUDFLARE_DEFAULT_ACCOUNT_ID: f02b3ef168fe64129e9941b4fb2e4dc1
  CLOUDFLARE_ACCOUNT_ID: f02b3ef168fe64129e9941b4fb2e4dc1
  CLOUDFLARE_EMAIL: oscar@mattrax.app
  CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
  # Used when building landing
  VITE_MATTRAX_CLOUD_ORIGIN: https://cloud.mattrax.app

jobs:
  sst:
    name: SST
    runs-on: ubuntu-latest
    # This is required to workaround the lack of wildcard for OIDC scope
    # https://github.com/Azure/azure-workload-identity/issues/373
    #
    # I swear to god Microsoft have never tried anything they have built.
    environment: production
    concurrency:
      group: production
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::101829795063:role/mattrax-gh-actions"
          aws-region: us-east-1
          role-session-name: mattrax-sst-workflow

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install SST
        run: curl -fsSL https://ion.sst.dev/install | bash

      - name: Install
        run: pnpm i

      - run: cd infra && sst deploy --stage brendonovich
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: 8aaf4dbe-001d-4003-9572-8dd6ab658c53
          ARM_TENANT_ID: 3509b545-2799-4c5c-a0d2-f822ddbd416c
          AZURE_SUBSCRIPTION_ID: 3509b545-2799-4c5c-a0d2-f822ddbd416c
          OAUTH_CLIENT_ID: kXdvzkEgiN11CNTRL
          OAUTH_CLIENT_SECRET: ${{ secrets.TAILSCALE_OAUTH_SECRET }}

  build:
      name: Build ${{ inputs.project }}
      runs-on: ubuntu-latest
      environment:
        name: ${{ inputs.project }}
      steps:
        - name: Git clone the repository
          uses: actions/checkout@v4

        - uses: pnpm/action-setup@v4
          with:
            version: latest

        - name: Install
          run: pnpm i
        
        - name: Build
          env:
            NITRO_PRESET: cloudflare_pages
          run: pnpm landing build # TODO: Project name

    deploy:
      name: Deploy ${{ inputs.project}}
      runs-on: ubuntu-latest
      needs:
        - sst
        # This will wait for *all* projects to build, not just the one we care about
        # GitHub don't provide a better solution :(
        - build
      environment:
        name: ${{ inputs.project }}
        url: ${{ steps.result.outputs.DEPLOYMENT_URL }}
      steps:
        # We pull this so Cloudflare can link the commit up
        - name: Git clone the repository
          uses: actions/checkout@v4

        # TODO: Get built artifacts

        - name: Export `DEPLOYMENT_URL`
          id: result
          run: echo "DEPLOYMENT_URL=https://example.com" >> $GITHUB_OUTPUT
