diff --git a/dist/index.jsx b/dist/index.jsx
index 1cf66a11fba9c8f2b736e4e7f6fed8040e571cb4..8217ebc789b4fdb52d5d0a6da9ab8eebbeda405b 100644
--- a/dist/index.jsx
+++ b/dist/index.jsx
@@ -4,7 +4,6 @@ import { createRecursiveProxy, createFlatProxy } from '@trpc/server/shared';
 import { createContext, useContext, createEffect, on, onCleanup, mergeProps } from 'solid-js';
 import { createQuery, createMutation, createInfiniteQuery } from '@tanstack/solid-query';
 import { isServer } from 'solid-js/web';
-import { useRequest } from 'solid-start/server';
 
 /**
  * We treat `undefined` as an input the same as omitting an `input`
@@ -75,6 +74,7 @@ function createSolidQueryUtilsProxy(context) {
                 fetchInfinite: () => context.fetchInfiniteQuery(queryKey, ...rest),
                 prefetch: () => context.prefetchQuery(queryKey, ...rest),
                 prefetchInfinite: () => context.prefetchInfiniteQuery(queryKey, ...rest),
+                ensureData: () => context.ensureQueryData(queryKey, ...rest),
                 invalidate: () => context.invalidateQueries(queryKey, ...rest),
                 refetch: () => context.refetchQueries(queryKey, ...rest),
                 cancel: () => context.cancelQuery(queryKey, ...rest),
@@ -119,7 +119,7 @@ function createHooksInternal(config) {
     const SolidQueryContext = config?.solidQueryContext;
     const TRPCProvider = (props) => {
         const { abortOnUnmount = false, queryClient } = props;
-        const event = isServer ? useRequest() : undefined;
+        const event = undefined; // isServer ? useRequest() : undefined;
         return (<Context.Provider value={{
                 abortOnUnmount,
                 queryClient,
@@ -159,6 +159,12 @@ function createHooksInternal(config) {
                         },
                     });
                 },
+                ensureQueryData: (pathAndInput, opts) => {
+                    return queryClient.ensureQueryData({
+                        queryKey: getArrayQueryKey(pathAndInput),
+                        queryFn: () => createTRPCClient(config?.config(event)).query(...getClientArgs(pathAndInput, opts)),
+                    });
+                },
                 invalidateQueries: (...args) => {
                     const [queryKey, ...rest] = args;
                     return queryClient.invalidateQueries({
diff --git a/dist/internals/context.d.ts b/dist/internals/context.d.ts
index c8ae87cc9b35c2f76ed470f5355f2dc37d9cd8ab..8290a9683a147d78ac8f045d04bd143cb0c3a5e0 100644
--- a/dist/internals/context.d.ts
+++ b/dist/internals/context.d.ts
@@ -36,6 +36,10 @@ export interface TRPCContextState<TRouter extends AnyRouter> extends Required<TR
      * @link https://tanstack.com/query/v4/docs/reference/QueryClient#queryclientprefetchinfinitequery
      */
     prefetchInfiniteQuery<TPath extends keyof TRouter["_def"]["queries"] & string, TProcedure extends TRouter["_def"]["queries"][TPath], TOutput extends inferProcedureOutput<TProcedure>, TInput extends inferProcedureInput<TProcedure>>(pathAndInput: [path: TPath, ...args: inferHandlerInput<TProcedure>], opts?: TRPCFetchInfiniteQueryOptions<TInput, TRPCClientError<TRouter>, TOutput>): Promise<void>;
+    /**
+     * @link https://react-query.tanstack.com/guides/prefetching
+     */
+    ensureQueryData<TPath extends keyof TRouter["_def"]["queries"] & string, TProcedure extends TRouter["_def"]["queries"][TPath], TOutput extends inferProcedureOutput<TProcedure>, TInput extends inferProcedureInput<TProcedure>>(pathAndInput: [path: TPath, ...args: inferHandlerInput<TProcedure>], opts?: TRPCFetchQueryOptions<TInput, TRPCClientError<TRouter>, TOutput>): Promise<TOutput>;
     /**
      * @link https://react-query.tanstack.com/guides/query-invalidation
      */
diff --git a/dist/shared/hooks/createHooksInternal.d.ts b/dist/shared/hooks/createHooksInternal.d.ts
index 21e54d78dbfc6959b770324144d78d21fdc96831..83ca4ac4ff0564512f501bc1e14cd17f4dfb78d3 100644
--- a/dist/shared/hooks/createHooksInternal.d.ts
+++ b/dist/shared/hooks/createHooksInternal.d.ts
@@ -3,7 +3,6 @@ import { type CreateTRPCClientOptions, type TRPCClient, type TRPCClientErrorLike
 import type { AnyRouter, ProcedureRecord, inferHandlerInput, inferProcedureClientError, inferProcedureInput, inferProcedureOutput } from '@trpc/server';
 import { type inferObservableValue } from '@trpc/server/observable';
 import { type Accessor, type JSX } from 'solid-js';
-import { useRequest } from 'solid-start/server';
 import { type TRPCContextProps, type TRPCContextState } from '../../internals/context';
 import { type CreateTRPCSolidOptions } from '../types';
 import { type UseTRPCQueryOptions, type UseTRPCInfiniteQueryOptions, type TRPCUseQueryBaseOptions } from './types';
@@ -38,7 +37,7 @@ export type TRPCProvider<TRouter extends AnyRouter> = (props: Omit<TRPCProviderP
     queryClientOpts?: Omit<QueryClientProviderProps, 'client'>;
 }) => JSX.Element;
 export type UseDehydratedState<TRouter extends AnyRouter> = (client: TRPCClient<TRouter>, trpcState: DehydratedState | undefined) => Accessor<DehydratedState | undefined>;
-export type CreateClient<TRouter extends AnyRouter> = (opts: (event?: ReturnType<typeof useRequest>) => CreateTRPCClientOptions<TRouter>) => TRPCClient<TRouter>;
+export type CreateClient<TRouter extends AnyRouter> = (opts: (event?: unknown) => CreateTRPCClientOptions<TRouter>) => TRPCClient<TRouter>;
 interface TRPCHookResult {
     trpc: {
         path: string;
diff --git a/dist/shared/proxy/utilsProxy.d.ts b/dist/shared/proxy/utilsProxy.d.ts
index 522eeb805ff4f8f0b156f5031c14d2790696fe43..b49830ae67e16065562ec1686952e5e22456333f 100644
--- a/dist/shared/proxy/utilsProxy.d.ts
+++ b/dist/shared/proxy/utilsProxy.d.ts
@@ -19,6 +19,10 @@ type DecorateProcedure<TRouter extends AnyRouter, TProcedure extends AnyQueryPro
      * @link https://react-query.tanstack.com/guides/prefetching
      */
     prefetchInfinite(input: inferProcedureInput<TProcedure>, procedureOpts?: ProcedureOptions, opts?: TRPCFetchInfiniteQueryOptions<inferProcedureInput<TProcedure>, TRPCClientError<TRouter>, inferProcedureOutput<TProcedure>>): Promise<void>;
+    /**
+     * @link https://react-query.tanstack.com/guides/prefetching
+     */
+    ensureData(input: inferProcedureInput<TProcedure>, opts?: TRPCFetchQueryOptions<inferProcedureInput<TProcedure>, TRPCClientError<TRouter>, inferProcedureOutput<TProcedure>>): Promise<inferProcedureOutput<TProcedure>>;
     /**
      * @link https://react-query.tanstack.com/guides/query-invalidation
      */
diff --git a/dist/shared/types.d.ts b/dist/shared/types.d.ts
index 6b9e1e8cae1e38d12c0a5ddd3a696b3a08b55ebd..5de55fe2d4ef3a789d96920a94c2ee43c83469bc 100644
--- a/dist/shared/types.d.ts
+++ b/dist/shared/types.d.ts
@@ -2,7 +2,6 @@ import { type QueryClient } from "@tanstack/solid-query";
 import { type CreateTRPCClientOptions } from "@trpc/client";
 import { type AnyRouter, type MaybePromise } from "@trpc/server";
 import type Solid from "solid-js";
-import { type PageEvent } from "solid-start";
 /**
  * @internal
  */
@@ -35,5 +34,5 @@ export interface CreateTRPCSolidOptions<TRouter extends AnyRouter> {
      * @default undefined
      */
     solidQueryContext?: Solid.Context<QueryClient | undefined>;
-    config: (event?: PageEvent) => CreateTRPCClientOptions<TRouter>;
+    config: (event?: unknown) => CreateTRPCClientOptions<TRouter>;
 }
diff --git a/package.json b/package.json
index d71081a6bb1efd38b65d1016a382f5be78161f0c..1f60c3330041e95429e74406c2b8ff16c03c31bc 100644
--- a/package.json
+++ b/package.json
@@ -20,7 +20,6 @@
     "@typescript-eslint/parser": "^5.44.0",
     "solid-js": "^1.8.3",
     "typescript": "^4.8.2",
-    "solid-start": "^0.3.7",
     "@tanstack/solid-query": "^5.0.0",
     "@trpc/client": "^10.41.0",
     "@trpc/server": "^10.41.0",
@@ -30,7 +29,6 @@
   },
   "peerDependencies": {
     "solid-js": "^1.8.3",
-    "solid-start": "^0.3.7",
     "@tanstack/solid-query": "^5.0.0",
     "@trpc/client": "^10.41.0",
     "@trpc/server": "^10.41.0"
