diff --git a/dist/index.mjs b/dist/index.mjs
index 8e287f135cd9f90718d8ae286366d2b7b90554c9..c7aa90386de32a447048e2bd6745db454c43cf28 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -1223,7 +1223,7 @@ function AO() {
 }
 var wl = {}, Rg;
 function xO() {
-  return Rg || (Rg = 1, Ve.process.env.NODE_ENV !== "production" && function() {
+  return Rg || (Rg = 1, true && function() {
     var t = qS, e = Symbol.for("react.element"), n = Symbol.for("react.portal"), a = Symbol.for("react.fragment"), c = Symbol.for("react.strict_mode"), u = Symbol.for("react.profiler"), r = Symbol.for("react.provider"), l = Symbol.for("react.context"), i = Symbol.for("react.forward_ref"), f = Symbol.for("react.suspense"), d = Symbol.for("react.suspense_list"), s = Symbol.for("react.memo"), o = Symbol.for("react.lazy"), m = Symbol.for("react.offscreen"), h = Symbol.iterator, y = "@@iterator";
     function b(Ne) {
       if (Ne === null || typeof Ne != "object")
@@ -1808,7 +1808,7 @@ Check the top-level render call using <` + ft + ">.");
     wl.Fragment = a, wl.jsx = Et, wl.jsxs = wt;
   }()), wl;
 }
-Ve.process.env.NODE_ENV === "production" ? jm.exports = AO() : jm.exports = xO();
+true ? jm.exports = AO() : jm.exports = xO();
 var Gl = jm.exports;
 function PO(t) {
   let e = t;
@@ -15640,7 +15640,7 @@ function Df(t, e) {
   try {
     a.parse();
   } catch (c) {
-    throw Ve.process.env.NODE_ENV !== "production" && c.name === "CssSyntaxError" && e && e.from && (/\.scss$/i.test(e.from) ? c.message += `
+    throw true && c.name === "CssSyntaxError" && e && e.from && (/\.scss$/i.test(e.from) ? c.message += `
 You tried to parse SCSS with the standard CSS parser; try again with the postcss-scss parser` : /\.sass/i.test(e.from) ? c.message += `
 You tried to parse Sass with the standard CSS parser; try again with the postcss-sass parser` : /\.less$/i.test(e.from) && (c.message += `
 You tried to parse Less with the standard CSS parser; try again with the postcss-less parser`)), c;
@@ -15744,7 +15744,7 @@ let h1 = {}, jo = class F2 {
     try {
       if (n && n.addToError(e), this.error = e, e.name === "CssSyntaxError" && !e.plugin)
         e.plugin = a.postcssPlugin, e.setMessage();
-      else if (a.postcssVersion && Ve.process.env.NODE_ENV !== "production") {
+      else if (a.postcssVersion && true) {
         let c = a.postcssPlugin, u = a.postcssVersion, r = this.result.processor.version, l = u.split("."), i = r.split(".");
         (l[0] !== i[0] || parseInt(l[1]) > parseInt(i[1])) && console.error(
           "Unknown error from PostCSS plugin. Your current PostCSS version is " + r + ", but " + c + " uses " + u + ". Perhaps this is the source of the error below."
@@ -15879,7 +15879,7 @@ let h1 = {}, jo = class F2 {
     return this.result;
   }
   then(e, n) {
-    return Ve.process.env.NODE_ENV !== "production" && ("from" in this.opts || XN(
+    return true && ("from" in this.opts || XN(
       "Without `from` option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning."
     )), this.async().then(e, n);
   }
@@ -16022,7 +16022,7 @@ let m1 = class {
     return this.result;
   }
   then(e, n) {
-    return Ve.process.env.NODE_ENV !== "production" && ("from" in this._opts || i4(
+    return true && ("from" in this._opts || i4(
       "Without `from` option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning."
     )), this.async().then(e, n);
   }
@@ -16083,7 +16083,7 @@ let l4 = o4, u4 = B2, c4 = Z0, f4 = Du, au = class {
       else if (typeof a == "function")
         n.push(a);
       else if (typeof a == "object" && (a.parse || a.stringify)) {
-        if (Ve.process.env.NODE_ENV !== "production")
+        if (true)
           throw new Error(
             "PostCSS syntaxes cannot be used as plugins. Instead, please use one of the syntax/parser/stringifier options as outlined in your PostCSS runner documentation."
           );
@@ -23151,7 +23151,7 @@ var Xa = {};
     };
   }
   const c = typeof Ve.process < "u" ? {
-    NODE_ENV: Ve.process.env.NODE_ENV,
+    NODE_ENV: "development",
     DEBUG: s(Ve.process.env.DEBUG),
     ENGINE: n.default.tailwindcss.engine
   } : {
@@ -48585,7 +48585,7 @@ to your top-level package.json.
         };
       }, "./node_modules/.pnpm/@babel+core@7.22.15/node_modules/@babel/core/lib/config/helpers/environment.js": (u, r) => {
         Object.defineProperty(r, "__esModule", { value: !0 }), r.getEnv = function(l = "development") {
-          return Ve.process.env.BABEL_ENV || Ve.process.env.NODE_ENV || l;
+          return Ve.process.env.BABEL_ENV || "development" || l;
         };
       }, "./node_modules/.pnpm/@babel+core@7.22.15/node_modules/@babel/core/lib/config/index.js": (u, r, l) => {
         function i() {
