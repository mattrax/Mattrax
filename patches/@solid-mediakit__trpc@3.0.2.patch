diff --git a/dist/index/index.d.ts b/dist/index/index.d.ts
index eeb5e7504db6323bf77274309335ace1a9aa8ce3..5f4ba5b1ee0a7257a2b4e9789195bfbd275088c9 100644
--- a/dist/index/index.d.ts
+++ b/dist/index/index.d.ts
@@ -9,3 +9,4 @@ declare global {
 export * from '@trpc/client';
 export { createTRPCSolidStart, type CreateTRPCSolidStart, } from './createTRPCSolid';
 export { createSolidQueryHooks } from './interop';
+export { UseTRPCQueryResult } from "./shared";
\ No newline at end of file
diff --git a/dist/index/shared/hooks/createHooksInternal.d.ts b/dist/index/shared/hooks/createHooksInternal.d.ts
index dec9c671b40af798e13148e59f0194be2517a176..f09e36906313198fc4236ced98e6aca2449f94a5 100644
--- a/dist/index/shared/hooks/createHooksInternal.d.ts
+++ b/dist/index/shared/hooks/createHooksInternal.d.ts
@@ -42,6 +42,7 @@ export type CreateClient<TRouter extends AnyRouter> = (opts: (event?: ReturnType
 interface TRPCHookResult {
     trpc: {
         path: string;
+        queryKey: string;
     };
 }
 /**
diff --git a/dist/index/shared/hooks/createHooksInternal.jsx b/dist/index/shared/hooks/createHooksInternal.jsx
index 3fd555880e09bbdfb66cc2e58bcb369fa95c240f..cc1e25d407bfc042c371c7ec6f72091d2465de63 100644
--- a/dist/index/shared/hooks/createHooksInternal.jsx
+++ b/dist/index/shared/hooks/createHooksInternal.jsx
@@ -130,13 +130,24 @@ export function createHooksInternal(config) {
             context: SolidQueryContext,
         });
         const ctx = useContext();
-        return __createQuery(() => ({
+        const result = __createQuery(() => ({
             queryKey: getArrayQueryKey(pathAndInput()),
             queryFn: wrapFn(() => {
                 return ctx.client().query(...getClientArgs(pathAndInput(), opts?.()));
             }),
             ...withCtxOpts(),
         }));
+        return new Proxy(result, {
+            get: function (target, prop, receiver) {
+                if (prop === 'trpc') {
+                    return {
+                        get path() { return pathAndInput()[0] } , get queryKey() { return pathAndInput() }
+                    };
+                }
+
+                return Reflect.get(target, prop, receiver);
+            }
+        });
     }
     function createMutation(path, opts) {
         const withCtxOpts = () => mergeProps(opts?.(), {
@@ -148,7 +159,7 @@ export function createHooksInternal(config) {
                 const actualPath = Array.isArray(path) ? path[0] : path;
                 return ctx
                     .client()
-                    .mutation(...getClientArgs([actualPath, input], opts));
+                    .mutation(...getClientArgs([actualPath, input], opts?.()));
             },
             ...withCtxOpts(),
         }));
