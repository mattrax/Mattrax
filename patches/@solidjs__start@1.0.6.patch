diff --git a/config/fs-router.js b/config/fs-router.js
index 994c49a1ce3e4399c12c729300ca278adc6e2d36..7e67353eaf1a60c0c3673b3eb55f5bc038f4789a 100644
--- a/config/fs-router.js
+++ b/config/fs-router.js
@@ -1,22 +1,31 @@
 import { analyzeModule, BaseFileSystemRouter, cleanPath } from "vinxi/fs-router";
 
+function toPathBase(src, config) {
+  const routePath = cleanPath(src, config)
+    // remove the initial slash
+    .slice(1)
+    .replace(/index$/, "")
+    // replace . with / for flat routes - e.g. foo.bar -> foo/bar
+    .replace(/\./g, "/")
+    // converts any splat route ... that got replaced back from ///
+    // this could be avoided with a lookbehind regex but safar has only supported them since mid 2023
+    .replace(/\/\/\//g, "...")
+    .replace(/\[([^\/]+)\]/g, (_, m) => {
+      if (m.length > 3 && m.startsWith("...")) {
+        return `*${m.slice(3)}`;
+      }
+      if (m.length > 2 && m.startsWith("[") && m.endsWith("]")) {
+        return `:${m.slice(1, -1)}?`;
+      }
+      return `:${m}`;
+    });
+
+  return routePath?.length > 0 ? `/${routePath}` : "/";
+}
+
 export class SolidStartClientFileRouter extends BaseFileSystemRouter {
   toPath(src) {
-    const routePath = cleanPath(src, this.config)
-      // remove the initial slash
-      .slice(1)
-      .replace(/index$/, "")
-      .replace(/\[([^\/]+)\]/g, (_, m) => {
-        if (m.length > 3 && m.startsWith("...")) {
-          return `*${m.slice(3)}`;
-        }
-        if (m.length > 2 && m.startsWith("[") && m.endsWith("]")) {
-          return `:${m.slice(1, -1)}?`;
-        }
-        return `:${m}`;
-      });
-
-    return routePath?.length > 0 ? `/${routePath}` : "/";
+    return toPathBase(src, this.config);
   }
 
   toRoute(src) {
@@ -74,21 +83,7 @@ function createHTTPHandlers(src, exports) {
 
 export class SolidStartServerFileRouter extends BaseFileSystemRouter {
   toPath(src) {
-    const routePath = cleanPath(src, this.config)
-      // remove the initial slash
-      .slice(1)
-      .replace(/index$/, "")
-      .replace(/\[([^\/]+)\]/g, (_, m) => {
-        if (m.length > 3 && m.startsWith("...")) {
-          return `*${m.slice(3)}`;
-        }
-        if (m.length > 2 && m.startsWith("[") && m.endsWith("]")) {
-          return `:${m.slice(1, -1)}?`;
-        }
-        return `:${m}`;
-      });
-
-    return routePath?.length > 0 ? `/${routePath}` : "/";
+    return toPathBase(src, this.config);
   }
 
   toRoute(src) {
diff --git a/dist/router/routes.js b/dist/router/routes.js
index 013b027463e34140080730704f93daa9c821afee..447b369112fd4d128ac86725d7f35caf0afd1b4e 100644
--- a/dist/router/routes.js
+++ b/dist/router/routes.js
@@ -7,7 +7,11 @@ function defineRoutes(fileRoutes) {
             return id.startsWith(o.id + "/");
         });
         if (!parentRoute) {
-            routes.push({ ...route, id, path: id.replace(/\/\([^)/]+\)/g, "").replace(/\([^)/]+\)/g, "") });
+            const path = id
+                // strip out escape group for escaping nested routes - e.g. foo(bar) -> foo
+                .replace(/\/\([^)/]+\)/g, "")
+                .replace(/\([^)/]+\)/g, "");
+            routes.push({ ...route, id, path });
             return routes;
         }
         processRoute(parentRoute.children || (parentRoute.children = []), route, id.slice(parentRoute.id.length), full);
@@ -38,7 +42,10 @@ const router = createRouter({
     routes: fileRoutes.reduce((memo, route) => {
         if (!containsHTTP(route))
             return memo;
-        let path = route.path.replace(/\/\([^)/]+\)/g, "").replace(/\([^)/]+\)/g, "").replace(/\*([^/]*)/g, (_, m) => `**:${m}`);
+        let path = route.path
+            .replace(/\/\([^)/]+\)/g, "")
+            .replace(/\([^)/]+\)/g, "")
+            .replace(/\*([^/]*)/g, (_, m) => `**:${m}`);
         if (/:[^/]*\?/g.test(path)) {
             throw new Error(`Optional parameters are not supported in API routes: ${path}`);
         }
diff --git a/dist/server/fetchEvent.js b/dist/server/fetchEvent.js
index fb4eec3596f2210004d6db358c2db2e73d36d5cd..8d4d9a738a71cf15f51b1d620515aa5f724014b0 100644
--- a/dist/server/fetchEvent.js
+++ b/dist/server/fetchEvent.js
@@ -1,5 +1,5 @@
 import { appendResponseHeader, getRequestIP, getResponseHeader, getResponseHeaders, getResponseStatus, getResponseStatusText, getWebRequest, removeResponseHeader, setResponseHeader, setResponseStatus } from "vinxi/http";
-const fetchEventSymbol = Symbol("fetchEvent");
+const fetchEventContext = "solidFetchEvent";
 export function createFetchEvent(event) {
     return {
         request: getWebRequest(event),
@@ -15,11 +15,11 @@ export function cloneEvent(fetchEvent) {
     };
 }
 export function getFetchEvent(h3Event) {
-    if (!h3Event[fetchEventSymbol]) {
+    if (!h3Event.context[fetchEventContext]) {
         const fetchEvent = createFetchEvent(h3Event);
-        h3Event[fetchEventSymbol] = fetchEvent;
+        h3Event.context[fetchEventContext] = fetchEvent;
     }
-    return h3Event[fetchEventSymbol];
+    return h3Event.context[fetchEventContext];
 }
 export function mergeResponseHeaders(h3Event, headers) {
     for (const [key, value] of headers.entries()) {
