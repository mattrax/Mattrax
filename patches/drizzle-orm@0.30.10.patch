diff --git a/sql/sql.js b/sql/sql.js
index 70ba14cbf1f215ee322d66c747141538d6734481..3e948fdccec69847c4e926ac4c2244b79081a463 100644
--- a/sql/sql.js
+++ b/sql/sql.js
@@ -9,7 +9,9 @@ class FakePrimitiveParam {
   static [entityKind] = "FakePrimitiveParam";
 }
 function isSQLWrapper(value) {
-  return value !== null && value !== void 0 && typeof value.getSQL === "function";
+  return (
+    value !== null && value !== void 0 && typeof value.getSQL === "function"
+  );
 }
 function mergeQueries(queries) {
   const result = { sql: "", params: [] };
@@ -52,7 +54,7 @@ class SQL {
       const query = this.buildQueryFromSourceParams(this.queryChunks, config);
       span?.setAttributes({
         "drizzle.query.text": query.sql,
-        "drizzle.query.params": JSON.stringify(query.params)
+        "drizzle.query.params": JSON.stringify(query.params),
       });
       return query;
     });
@@ -60,110 +62,145 @@ class SQL {
   buildQueryFromSourceParams(chunks, _config) {
     const config = Object.assign({}, _config, {
       inlineParams: _config.inlineParams || this.shouldInlineParams,
-      paramStartIndex: _config.paramStartIndex || { value: 0 }
+      paramStartIndex: _config.paramStartIndex || { value: 0 },
     });
     const {
       escapeName,
       escapeParam,
       prepareTyping,
       inlineParams,
-      paramStartIndex
+      paramStartIndex,
     } = config;
-    return mergeQueries(chunks.map((chunk) => {
-      if (is(chunk, StringChunk)) {
-        return { sql: chunk.value.join(""), params: [] };
-      }
-      if (is(chunk, Name)) {
-        return { sql: escapeName(chunk.value), params: [] };
-      }
-      if (chunk === void 0) {
-        return { sql: "", params: [] };
-      }
-      if (Array.isArray(chunk)) {
-        const result = [new StringChunk("(")];
-        for (const [i, p] of chunk.entries()) {
-          result.push(p);
-          if (i < chunk.length - 1) {
-            result.push(new StringChunk(", "));
+    return mergeQueries(
+      chunks.map((chunk) => {
+        if (is(chunk, StringChunk)) {
+          return { sql: chunk.value.join(""), params: [] };
+        }
+        if (is(chunk, Name)) {
+          return { sql: escapeName(chunk.value), params: [] };
+        }
+        if (chunk === void 0) {
+          return { sql: "", params: [] };
+        }
+        if (Array.isArray(chunk)) {
+          const result = [new StringChunk("(")];
+          for (const [i, p] of chunk.entries()) {
+            result.push(p);
+            if (i < chunk.length - 1) {
+              result.push(new StringChunk(", "));
+            }
           }
+          result.push(new StringChunk(")"));
+          return this.buildQueryFromSourceParams(result, config);
         }
-        result.push(new StringChunk(")"));
-        return this.buildQueryFromSourceParams(result, config);
-      }
-      if (is(chunk, SQL)) {
-        return this.buildQueryFromSourceParams(chunk.queryChunks, {
-          ...config,
-          inlineParams: inlineParams || chunk.shouldInlineParams
-        });
-      }
-      if (is(chunk, Table)) {
-        const schemaName = chunk[Table.Symbol.Schema];
-        const tableName = chunk[Table.Symbol.Name];
-        return {
-          sql: schemaName === void 0 ? escapeName(tableName) : escapeName(schemaName) + "." + escapeName(tableName),
-          params: []
-        };
-      }
-      if (is(chunk, Column)) {
-        return { sql: escapeName(chunk.table[Table.Symbol.Name]) + "." + escapeName(chunk.name), params: [] };
-      }
-      if (is(chunk, View)) {
-        const schemaName = chunk[ViewBaseConfig].schema;
-        const viewName = chunk[ViewBaseConfig].name;
-        return {
-          sql: schemaName === void 0 ? escapeName(viewName) : escapeName(schemaName) + "." + escapeName(viewName),
-          params: []
-        };
-      }
-      if (is(chunk, Param)) {
-        const mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);
-        if (is(mappedValue, SQL)) {
-          return this.buildQueryFromSourceParams([mappedValue], config);
+        if (is(chunk, SQL)) {
+          return this.buildQueryFromSourceParams(chunk.queryChunks, {
+            ...config,
+            inlineParams: inlineParams || chunk.shouldInlineParams,
+          });
         }
-        if (inlineParams) {
-          return { sql: this.mapInlineParam(mappedValue, config), params: [] };
+        if (is(chunk, Table)) {
+          const schemaName = chunk[Table.Symbol.Schema];
+          const tableName = chunk[Table.Symbol.Name];
+          return {
+            sql:
+              schemaName === void 0
+                ? escapeName(tableName)
+                : escapeName(schemaName) + "." + escapeName(tableName),
+            params: [],
+          };
         }
-        let typings;
-        if (prepareTyping !== void 0) {
-          typings = [prepareTyping(chunk.encoder)];
+        if (is(chunk, Column)) {
+          return {
+            sql:
+              escapeName(chunk.table[Table.Symbol.Name]) +
+              "." +
+              escapeName(chunk.name),
+            params: [],
+          };
         }
-        return { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };
-      }
-      if (is(chunk, Placeholder)) {
-        return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk] };
-      }
-      if (is(chunk, SQL.Aliased) && chunk.fieldAlias !== void 0) {
-        return { sql: escapeName(chunk.fieldAlias), params: [] };
-      }
-      if (is(chunk, Subquery)) {
-        if (chunk._.isWith) {
-          return { sql: escapeName(chunk._.alias), params: [] };
+        if (is(chunk, View)) {
+          const schemaName = chunk[ViewBaseConfig].schema;
+          const viewName = chunk[ViewBaseConfig].name;
+          return {
+            sql:
+              schemaName === void 0
+                ? escapeName(viewName)
+                : escapeName(schemaName) + "." + escapeName(viewName),
+            params: [],
+          };
         }
-        return this.buildQueryFromSourceParams([
-          new StringChunk("("),
-          chunk._.sql,
-          new StringChunk(") "),
-          new Name(chunk._.alias)
-        ], config);
-      }
-      if (isPgEnum(chunk)) {
-        if (chunk.schema) {
-          return { sql: escapeName(chunk.schema) + "." + escapeName(chunk.enumName), params: [] };
+        if (is(chunk, Param)) {
+          const mappedValue =
+            chunk.value === null
+              ? null
+              : chunk.encoder.mapToDriverValue(chunk.value);
+          if (is(mappedValue, SQL)) {
+            return this.buildQueryFromSourceParams([mappedValue], config);
+          }
+          if (inlineParams) {
+            return {
+              sql: this.mapInlineParam(mappedValue, config),
+              params: [],
+            };
+          }
+          let typings;
+          if (prepareTyping !== void 0) {
+            typings = [prepareTyping(chunk.encoder)];
+          }
+          return {
+            sql: escapeParam(paramStartIndex.value++, mappedValue),
+            params: [mappedValue],
+            typings,
+          };
         }
-        return { sql: escapeName(chunk.enumName), params: [] };
-      }
-      if (isSQLWrapper(chunk)) {
-        return this.buildQueryFromSourceParams([
-          new StringChunk("("),
-          chunk.getSQL(),
-          new StringChunk(")")
-        ], config);
-      }
-      if (inlineParams) {
-        return { sql: this.mapInlineParam(chunk, config), params: [] };
-      }
-      return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk] };
-    }));
+        if (is(chunk, Placeholder)) {
+          return {
+            sql: escapeParam(paramStartIndex.value++, chunk),
+            params: [chunk],
+          };
+        }
+        if (is(chunk, SQL.Aliased) && chunk.fieldAlias !== void 0) {
+          return { sql: escapeName(chunk.fieldAlias), params: [] };
+        }
+        if (is(chunk, Subquery)) {
+          if (chunk._.isWith) {
+            return { sql: escapeName(chunk._.alias), params: [] };
+          }
+          return this.buildQueryFromSourceParams(
+            [
+              new StringChunk("("),
+              chunk._.sql,
+              new StringChunk(") "),
+              new Name(chunk._.alias),
+            ],
+            config
+          );
+        }
+        if (isPgEnum(chunk)) {
+          if (chunk.schema) {
+            return {
+              sql: escapeName(chunk.schema) + "." + escapeName(chunk.enumName),
+              params: [],
+            };
+          }
+          return { sql: escapeName(chunk.enumName), params: [] };
+        }
+        if (isSQLWrapper(chunk)) {
+          return this.buildQueryFromSourceParams(
+            [new StringChunk("("), chunk.getSQL(), new StringChunk(")")],
+            config
+          );
+        }
+        if (inlineParams) {
+          return { sql: this.mapInlineParam(chunk, config), params: [] };
+        }
+        return {
+          sql: escapeParam(paramStartIndex.value++, chunk),
+          params: [chunk],
+        };
+      })
+    );
   }
   mapInlineParam(chunk, { escapeString }) {
     if (chunk === null) {
@@ -194,7 +231,8 @@ class SQL {
     return new SQL.Aliased(this, alias);
   }
   mapWith(decoder) {
-    this.decoder = typeof decoder === "function" ? { mapFromDriverValue: decoder } : decoder;
+    this.decoder =
+      typeof decoder === "function" ? { mapFromDriverValue: decoder } : decoder;
     return this;
   }
   inlineParams() {
@@ -216,17 +254,22 @@ function name(value) {
   return new Name(value);
 }
 function isDriverValueEncoder(value) {
-  return typeof value === "object" && value !== null && "mapToDriverValue" in value && typeof value.mapToDriverValue === "function";
+  return (
+    typeof value === "object" &&
+    value !== null &&
+    "mapToDriverValue" in value &&
+    typeof value.mapToDriverValue === "function"
+  );
 }
 const noopDecoder = {
-  mapFromDriverValue: (value) => value
+  mapFromDriverValue: (value) => value,
 };
 const noopEncoder = {
-  mapToDriverValue: (value) => value
+  mapToDriverValue: (value) => value,
 };
 const noopMapper = {
   ...noopDecoder,
-  ...noopEncoder
+  ...noopEncoder,
 };
 class Param {
   /**
@@ -248,7 +291,7 @@ function param(value, encoder) {
 }
 function sql(strings, ...params) {
   const queryChunks = [];
-  if (params.length > 0 || strings.length > 0 && strings[0] !== "") {
+  if (params.length > 0 || (strings.length > 0 && strings[0] !== "")) {
     queryChunks.push(new StringChunk(strings[0]));
   }
   for (const [paramIndex, param2] of params.entries()) {
@@ -271,11 +314,13 @@ function sql(strings, ...params) {
   sql2.raw = raw;
   function join(chunks, separator) {
     const result = [];
-    for (const [i, chunk] of chunks.entries()) {
-      if (i > 0 && separator !== void 0) {
-        result.push(separator);
+    if (chunks.entries) {
+      for (const [i, chunk] of chunks.entries()) {
+        if (i > 0 && separator !== void 0) {
+          result.push(separator);
+        }
+        result.push(chunk);
       }
-      result.push(chunk);
     }
     return new SQL(result);
   }
@@ -347,20 +392,20 @@ class View {
       selectedFields,
       query,
       isExisting: !query,
-      isAlias: false
+      isAlias: false,
     };
   }
   getSQL() {
     return new SQL([this]);
   }
 }
-Column.prototype.getSQL = function() {
+Column.prototype.getSQL = function () {
   return new SQL([this]);
 };
-Table.prototype.getSQL = function() {
+Table.prototype.getSQL = function () {
   return new SQL([this]);
 };
-Subquery.prototype.getSQL = function() {
+Subquery.prototype.getSQL = function () {
   return new SQL([this]);
 };
 export {
@@ -380,6 +425,6 @@ export {
   noopMapper,
   param,
   placeholder,
-  sql
+  sql,
 };
 //# sourceMappingURL=sql.js.map
